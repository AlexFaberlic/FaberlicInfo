import threading
import telebot
from telebot.types import BotCommand
import json
import os
import pip
import re

pip.main(['install', 'pytelegrambotapi'])

# Get the bot token from environment variable
token = os.getenv("TELEGRAM_BOT_TOKEN", "")

bot = telebot.TeleBot(token)

commands = [
    BotCommand("1rub", "–ü–æ–¥–∞—Ä–æ–∫ –∑–∞ 1 —Ä—É–±–ª—å"),
    BotCommand("20_26", "–°–∫–∏–¥–∫–∞ –¥–æ 26%"),
    BotCommand("order", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"),
    BotCommand("delivery", "–í—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É"),
    BotCommand("change", "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"),
    BotCommand("terms", "–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"),
    BotCommand("earn", "–•–æ—á—É –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å"),
    BotCommand("feedback", "–ö–∞–∫ –ø–∏—Å–∞—Ç—å –≤ '–û–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å'"),
]

bot.set_my_commands(commands)

# Predefined responses for each command
responses = {
    "1rub": "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –∑–∞ 1 —Ä—É–±–ª—å ‚Äî —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å!",
    "20_26": "üîñ –°–∫–∏–¥–∫–∞ –¥–æ 26% ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—ã–≥–æ–¥–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏!",
    "order": "üõí –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.",
    "delivery": "üöö –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏.",
    "change": "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.",
    "terms": "‚è≥ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –∫–æ–≥–¥–∞ –∂–¥–∞—Ç—å –∑–∞–∫–∞–∑?",
    "earn": "üí∞ –•–æ—á—É –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ‚Äî —É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.",
    "feedback": "‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚Äî –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
}

# Load JSON data from a file
with open("videos.json", "r", encoding="utf-8") as file:
    data = json.load(file)

welcome_message = """
üìπ *–ü–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞ –§–∞–±–µ—Ä–ª–∏–∫ - –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ*
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b><u>–∑–∞–∫–∞–∑</u></b>.
"""


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, 
                     welcome_message,
                     parse_mode='HTML')


@bot.message_handler(commands=list(responses.keys()))
def command_handler(message):
    """Handles multiple commands in a single function"""
    send_video(message)


@bot.message_handler(content_types=['text'])
def get_text_message(message):
    command_codes = get_command_codes(message.text)
    # Call send_video for each matching code
    for code in command_codes:
        if code in responses:
            message_result_text = responses[code]
            words = message.text.lower().split()
            for word in words:
                message_result_text = re.sub(f'(?i){word}', highlight_match, message_result_text)

            description = f"–ö–æ–º–∞–Ω–¥–∞ /{code} - {message_result_text}"
            bot.send_message(message.chat.id,
                             description,
                             parse_mode='HTML',
                             disable_notification=True)
    if command_codes == []:
        not_found_message = f"–°–ª–æ–≤–æ ''{message.text}'' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        bot.send_message(message.chat.id, not_found_message,
                         disable_notification=True)

def highlight_match(match):
    return f'<b><u>{match.group(0)}</u></b>'

def get_command_codes(description_substring):
    words = description_substring.lower().split()
    matching_codes = []
    
    for code, description in responses.items():
        description_lower = description.lower()
        if any(word in description_lower for word in words):
            matching_codes.append(code)
    return matching_codes


def send_video(message):
    video_id = message.text[1:]
    caption = responses.get(video_id)
    video = find_video_by_id(video_id)
    if video is not None:
        video_code = video["video_code"]
        description = video["description"]
    else:
        video_code = None
        description = f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Å –∫–æ–¥–æ–º: {video_id}"

    bot.send_message(message.chat.id, description, disable_notification=True)
    if video_code is not None:
        video_url = f"https://drive.google.com/uc?export=download&confirm=t&id={video_code}"
        bot.send_video(message.chat.id,
                       video_url,
                       caption=caption,
                       disable_notification=True)


# Function to find a video by ID
def find_video_by_id(video_id):
    for video in data["videos"]:
        if video["id"] == video_id:
            return video
    return None  # If not found


def bot_check():
    return bot.get_me()


def bot_runner():
    bot.infinity_polling(none_stop=True)


t = threading.Thread(target=bot_runner)
t.start()
